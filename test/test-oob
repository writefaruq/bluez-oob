#!/usr/bin/python

import gobject

import sys
import dbus
import dbus.service
import dbus.mainloop.glib


def create_device_reply(device):
	print "New device (%s)" % (device)
	mainloop.quit()

def create_device_error(error):
	print "Creating device failed: %s" % (error)
	mainloop.quit()

if __name__ == '__main__':

	if len(sys.argv) < 5:
		print "test-oob <initiator|responder> <remote bdaddr> <hash> <randomizer>"
		exit()

	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()
	manager = dbus.Interface(bus.get_object("org.bluez", "/"),
			"org.bluez.Manager")

	path = manager.DefaultAdapter()
	print "Using adapter:" + path
	print "Local role:" + sys.argv[1]
	print "Device:" + sys.argv[2]
	print "Hash:" + sys.argv[3]
	print "Randomizer:" + sys.argv[4]

	oob = dbus.Array([0x11, 0x0E], "ay")
	hash = [ int("%s" % i, 16) for i in sys.argv[3].split() ]
	hash = dbus.Array(hash, "ay")
	randomizer = [ int("%s" % i, 16) for i in sys.argv[4].split() ]
	randomizer= dbus.Array(randomizer, "ay")

	oob += hash + [0x11, 0x0f] + randomizer

	adapter = dbus.Interface(bus.get_object("org.bluez", path),
			"org.bluez.Adapter")

	mainloop = gobject.MainLoop()

	print adapter.CreatePairedOOBDevice(sys.argv[2], sys.argv[1], oob,
				reply_handler=create_device_reply,
				error_handler=create_device_error)
	mainloop.run()
